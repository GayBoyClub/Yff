#include <FastLED.h> // The library that the diode uses to set colors and so on.
#define NUM_LEDS 80 // number of diodes used.
#define DATA_PIN 5 //datapin of the diodes.

CRGB leds[NUM_LEDS];
byte frame[112] = 
{
  

  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,
  1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,
  0,0,1,1,1,1,0,0,


};

byte block1, block2,block3, Pblock1,Pblock2,Pblock3,Pmaster;
byte master = 3;
String type = "L";
byte x = 1; //The ball heading direction, AKA if it will go up or down, left or right.
byte y = 8; //8 because one line is 8 diodes in width.
String dir = "S";
byte active = true;

void setup() {
FastLED.addLeds<PL9823, DATA_PIN>(leds, NUM_LEDS); 
FastLED.clear();
Serial.begin(9600);
pinMode(8,INPUT_PULLUP); // button inputs
pinMode(2,INPUT_PULLUP); // -||- 
}


  /*
    void ledset(int p) //sets the color based on the Frame array value of the given index.
{
   if(frame[p+i] == 'g'){leds[p] = 0x00AA00;}
   else if(frame[p+i] == 'w'){leds[p] = 0xCCCCCC;}
   else if(frame[p+i] == 'r'){leds[p] = 0x550000;}
   else if(frame[p+i] == 'b'){leds[p] = 0x000055;}
   else if(frame[p+i] == 'y'){leds[p] = 0xAAAAAA;}

}*/
  
void block(){

    if (type == "L" && active == true){
      if (dir == "N"){Pblock1 = block1; block1 = master-y*2; Pblock2 = block2; block2 = master-y; Pblock3 = block3; block3 = master+x;}
      else if (dir == "S"){Pblock1 = block1; block1 = master+2*y; Pblock2 = block2; block2 = master+y; Pblock3 = block3; block3 = master-x;}
      else if (dir == "W"){Pblock1 = block1; block1 = master-2; Pblock2 = block2; block2 = master-y; Pblock3 = block3; block3 = master-x;}
      else if (dir == "E"){Pblock1 = block1; block1 = master+2; Pblock2 = block2; block2 = master+x; Pblock3 = block3; block3 = master+y;}                        
     }
       
  /*
    
    else if (type == "D" && active == true){
      if (dir = "N"){block1 = ; block2 = ; block3 = ;} 
      if (dir = "S"){block1 = ; block2 = ; block3 = ;} 
      if (dir = "W"){block1 = ; block2 = ; block3 = ;} 
      if (dir = "E"){block1 = ; block2 = ; block3 = ;} 
    }
    
    else if (type == "Z"){
      if (dir = "W"){block1 = ; block2 = ; block3 = ;} 
      if (dir = "E"){block1 = ; block2 = ; block3 = ;}     
    }
    
    else if (type == "I"){
      if (dir = "N"){block1 = ; block2 = ; block3 = ;}
      if (dir = "S"){block1 = ; block2 = ; block3 = ;} 
      if (dir = "W"){block1 = ; block2 = ; block3 = ;} 
      if (dir = "E"){block1 = ; block2 = ; block3 = ;}     
    }

*/


}





void loop() {
FastLED.clear();
if(frame[block1 + 8] || frame[block2 + 8] || frame[block3+8] || frame[master+8]   != 0 ) { // stopping part, not to be confused with hitbox checks if its a valid stop or if it should continue.
  

  if (type == "L"){ 
  frame[block1] = 1;
  frame[block2] = 1;
  frame[block3] = 1;
  frame[master] = 1;
  }

  else if (type == "Z"){
  frame[block1] = 2;
  frame[block2] = 2;
  frame[block3] = 2;
  frame[master] = 2;
  }
  
  else if (type == "S"){
  frame[block1] = 3;
  frame[block2] = 3;
  frame[block3] = 3;
  frame[master] = 3;
  }
  
  else  if (type == "D"){
  frame[block1] = 4;
  frame[block2] = 4;
  frame[block3] = 4;
  frame[master] = 4;
  }

  else if (type == "I"){
  frame[block1] = 5;
  frame[block2] = 5;
  frame[block3] = 5;
  frame[master] = 5;
  }
active = false;
  }
  else if (master >= 103){
        block();
  
  if (type == "L"){ 
  frame[block1] = 1;
  frame[block2] = 1;
  frame[block3] = 1;
  frame[master] = 1;
 
  }

  else if (type == "Z"){
  frame[block1] = 2;
  frame[block2] = 2;
  frame[block3] = 2;
  frame[master] = 2;
  }
  
  else if (type == "S"){
  frame[block1] = 3;
  frame[block2] = 3;
  frame[block3] = 3;
  frame[master] = 3;
  
  }
  
  else  if (type == "D"){
  frame[block1] = 4;
  frame[block2] = 4;
  frame[block3] = 4;
  frame[master] = 4;
  
  }

  else if (type == "I"){
  frame[block1] = 5;
  frame[block2] = 5;
  frame[block3] = 5;
  frame[master] = 5;
  }
active = false;
  }




delay(100);
master = master+8;
block();
delay(100);
for(int i = 0; i<14; i++){
if(frame[i*y] != 0 && frame[i*y+1] != 0 && frame[i*y+2] != 0 && frame[i*y+3] != 0 && frame[i*y+4] != 0 && frame[i*y+5] != 0 && frame[i*y+6] != 0 && frame[i*y+7] != 0 ){frame[i*y] = 0; frame[i*y+1] = 0; frame[i*y+2] = 0; frame[i*y+3] = 0; frame[i*y+4] = 0; frame[i*y+5] = 0; frame[i*y+6] = 0; frame[i*y+7] = 0; }
}


  

if(frame[block1] || frame[block2] || frame[block3] || frame[master] != 0){ //checks if a rotation would cause a hitbox error, in the case of that it will try to correct it.
  
  block1 = Pblock1;
  block2 = Pblock2;
  block3 = Pblock3;
  master = Pmaster;
  
  }



  


for (int i = 0; i<80; i++){if(frame[i+32] != 0){leds[i] = 0xaa00aa;}}
FastLED.show();
if (active == false){master = 3; active = true; block();}
leds[master-32] = 0x00f0f0;
leds[block1-32] = 0x00f0f0;
leds[block2-32] = 0x00f0f0;
leds[block3-32] = 0x00f0f0;
FastLED.show();


}
